#!/usr/bin/env bash
# wslfetch - WSL Screenshot Information Tool
# Component of Windows 10 linux Subsystem Utility
# <https://github.com/patrick330602/wslu>

# Copyright(c) 2017 Patrick Wu J M <wotingwu@live.com>

# For more help for wslfetch, visit the following site:
# http://garage.patrickwu.cf/man/wslu/wslfetch

version=17

is_line=0
is_splash=0
. wslu --silent

help_short="wslfetch (-h|-v|-s|-l)"

hostname="$(hostname)"
branch=`wslsys -b -s`
build=`wslsys -B -s`
release=`wslsys -R -s`
kernel=`wslsys -K -s`
uptime=`wslsys -U -s`
packages=`wslsys -P -s`

case "$distro" in
	'ubuntu')
		t="${red}"
		full_text=(
            "${red}                 .-.      "
            "           .-'\`\`${red}(|||)     "
            "${orange}        ,\`\\${reset} \    ${red}\`-\`${reset}.     "
            "${orange}       /   \\${reset} '\`\`-.   \`    "
            "   .-.${orange}    ,${reset}       \`___:   "
            "  (:::)${orange}   :${reset}        ${red}___    ${reset}"
            "   \`-\`${orange}    \`${reset}       ${red},   :   ${reset}"
            "${orange}       \\   / ${red},..-\`   , ${reset}   "
            "${orange}        \`./ ${red}/    ${orange}.-.\`     ${reset}"
            "${red}           \`-..-${orange}(   )     ${reset}"
            "${orange}                 \`-\`      ${reset}"
);;
	'opensuse' | 'sles')
        t="${cyan}${bold}"
        full_text=(
            "${cyan} /\$\$      /\$\$  /\$\$\$\$\$\$  /\$\$       "
            "${cyan}| \$\$  /\$ | \$\$ /\$\$__  \$\$| \$\$	  "
            "${cyan}| \$\$ /\$\$\$| \$\$| \$\$${reset}  ${cyan}\\__/| \$\$${reset}       "
            "${cyan}| \$\$${reset}${cyan}/\$\$${reset} ${cyan}\$\$${reset} ${cyan}\$\$${reset}${cyan}|  \$\$\$\$\$\$${reset} ${cyan}| \$\$${reset}       "
            "${cyan}| \$\$\$\$${reset}${cyan}_  \$\$\$\$${reset} ${cyan}\\____  \$\$${reset}${cyan}| \$\$${reset}	  "
            "${cyan}| \$\$\$${reset}${cyan}/ \\  \$\$\$${reset} ${cyan}/\$\$${reset}  ${cyan}\\ \$\$${reset}${cyan}| \$\$${reset}	  "
            "${cyan}| \$\$${reset}${cyan}/   \\  \$\$${reset}${cyan}|  \$\$\$\$\$\$${reset}${cyan}/| \$\$\$\$\$\$\$\$${reset} "
            "${cyan}|__/     \\__/ \\______/ |________/${reset} "
            );;
esac

info_text=("${t}Windows 10 Linux Subsytem${reset}"
"${t}${USER}${reset}@${t}${hostname}${reset}"
"${t}BUILD:${reset}	${build}"
"${t}BRANCH:${reset}	${branch}"
"${t}RELEASE:${reset}	${release}"
"${t}KERNEL:${reset}	${kernel}"
"${t}UPTIME:${reset}	${uptime}"
"${t}PACKAGES:${reset}	${packages}")

line(){
    if [[ "$is_line" == "1" ]]; then
        printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -
    else
        echo ""
    fi
}

info_length=${#info_text[@]}
full_length=${#full_text[@]}

for args; do
	case $args in
        -h|--help) help $0 "$help_short"; exit;;
		-v|--version) echo "wslpath v$wslu_version.$version"; exit;;
        -s|--splash) is_splash=1;;
        -l|--line) is_line=1;;
    esac
done

line
# use for loop to read all values and indexes
for (( i=0; i<${full_length}; i++ ));
do
    tmp=""
    if [[ $i -le ${info_length} ]]; then
        tmp="${info_text[$i]}"
    fi
    echo -e "${full_text[$i]}${tmp}"
done
line

if [[ "$is_splash" == "1" ]]; then
    sleep 2
    clear
fi
