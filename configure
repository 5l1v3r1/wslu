#!/usr/bin/env bash

CURRENT_PATH="$(pwd)"

if [[ ! -f /proc/sys/fs/binfmt_misc/WSLInterop ]]; then
	echo "Your distro do not support WSL Interopability. Installation Aborted."
	exit 1
fi

distro="$(cat /etc/os-release | head -n1 | sed -e 's/NAME="//g')"
if [[ "$distro" == Ubuntu* ]]; then
	distro="ubuntu"
elif [[ "$distro" == *Debian* ]]; then
	distro="debian"
elif [[ "$distro" == *Kali* ]]; then
	distro="kali"
elif [[ "$distro" == openSUSE* ]]; then
	distro="opensuse"
elif [[ "$distro" == SLES* ]]; then
	distro="sles"
fi


function legacy_rm {
	echo "removing legacy packages..."
	case $distro in
		ubuntu|kali|debian)
			sudo apt -y purge wslu;;
		opensuse|sles)
			sudo zypper -n un wslu;;
	esac
	echo "remove legacy documents..."
	sudo rm -rf /usr/share/man/man1/wsl*
}

function wsl_interop {
	echo -e "WSL Interopability\n*********************"
	cat /proc/sys/fs/binfmt_misc/WSLInterop
	echo ""
}

function wslu_test {
	extras/bats/libexec/bats tests/wslu.bats tests/wslsys.bats tests/wslusc.bats tests/wslupath.bats tests/wslfetch.bats tests/wslpkg.bats 
}

function wsl_cmd {
	echo -e "\ntesting cmd.exe..."
	cmd.exe /c ver
	if [[ $? -eq 0 ]]; then
		echo "cmd.exe can be invoked."
	else
		echo "cmd.exe failed to launch."
		exit 1
	fi
}

function wsl_powershell {
	echo -e "\ntesting powershell.exe..."
	powershell.exe Get-Host
	if [[ $? -eq 0 ]]; then
		echo "powershell.exe can be invoked."
	else
		echo "powershell.exe failed to launch."
		exit 1
	fi
	ppep="`powershell.exe Get-ExecutionPolicy 2>&1 | tail -n1 | sed 's/\r$//'`"
	echo -e "Powershell Execution Policy: $ppep"
	if [[ "$ppep" = "Restricted" ]]; then
		cat << EOF
***************************************
               WARNING
***************************************
The execution policy for powershell.exe
is set to Restricted. You should set P-
owershell Execution Policy to Unrestri-
cted with a Powershell Prompt with Adm-
inistrator right:

   Set-ExecutionPolicy Unrestricted

Due to the limitation, it is not possi-
ble to invoke this command from Bash P-
rompt.
EOF
	fi
}

function wsl_reg {
	echo -e "\ntesting reg.exe..."
	reg.exe /? 
	if [[ $? -eq 0 ]]; then
		echo "reg.exe can be invoked."
	else
		echo "reg.exe failed to launch."
		exit 1
	fi
}

function uninstallation {
	for f in /usr/share/man/man1/wsl*; do
    	sudo rm -f $f;
		echo "rm -f $f"; 
	done
	for f in /usr/bin/wsl*; do
    	sudo rm -f $f;
		echo "rm -f $f";
	done
}

function installation {
	for f in src/wsl*; do
		bname="$(basename $f)"
    		sudo ln -s $CURRENT_PATH/$f /usr/bin/$bname;
		echo "exec $f linked to /usr/bin/$bname";
	done
	sudo ln -s $CURRENT_PATH/configure /usr/bin/wsluconf
	echo "this file(./configure) has linked to /usr/bin/wsluconf."
	echo "Installation Completed. If you want to configure wslu, please run `wsluconf`."
}

case $1 in
	--test)
	wslu_test
	;;
	--interop-check)
	wsl_interop
	wsl_cmd
	wsl_powershell
	wsl_reg
	;;
	-u|--uninstall)
	uninstallation
	;;
	-p|--purge)
	uninstallation
	rm -rf ~/.wslu
	;;
	-r|--reinstall)
	uninstallation
	installation
	;;
	-i|--install)
	echo -e "wslu configuration begins."
	wsl_interop
	wsl_cmd
	wsl_powershell
	wsl_reg
	echo -e "\nInstall dependencies..."
	case "$distro" in
		'ubuntu')
			sudo apt install build-essential bc ppa-purge wget unzip -y
			;;
		'opensuse')
			sudo zypper -n install bc lsb-release hostname wget unzip
			;;
		'sles')
			sudo zypper -n install bc lsb-release wget unzip
			;;
		'debian')
			sudo apt -y install build-essential bc wget unzip lsb-release
			;;
		'kali')
			sudo apt -y install build-essential bc wget unzip lsb-release
			;;
	esac
	echo -e "\nPre-checking compelete. Installing..."
	installation
	;;
esac
 
