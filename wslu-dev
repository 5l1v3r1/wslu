#!/usr/bin/env bash

# wslu - Windows 10 linux Subsystem Utility
# <https://github.com/patrick330602/wslu>

# Copyright(c) 2017 Patrick Wu J M <wotingwu@live.com>

# For more help for wslu, visit the following site:
# http://garage.patrickwu.cf/man/wslu

# data segment
wslu_version=0.16

## color
red=`tput setaf 1`
green=`tput setaf 2`
brown=`tput setaf 3`
blue=`tput setaf 4`
purple=`tput setaf 5`
cyan=`tput setaf 6`
yellow=`tput setaf 7`
bold=`tput bold`
reset=`tput sgr0`

## indicator
info="[${cyan}info${reset}] "
error="[${red}error${reset}] "
warn="[${red}warn${reset}] "

## constants
help_short="wslu [help|version|shortcut|install|system|fetch] <options>"
help="Windows 10 Linux Subsystem Utility
Usage: $help_short

For more help for wslu, visit the following site:
http://garage.patrickwu.cf/wslu"

## Windows side data
path_win()
{
	new_path="$(echo $1 | sed -e 's|\\|\\\\|g')"
	echo $new_path
}
path_linux()
{
	new_path="$(echo $1 | sed -e 's|\\|/|g' -e 's|^\([A-Za-z]\)\:/\(.*\)|/mnt/\L\1\E/\2|')"
	echo $new_path
}
desktop_path=`reg.exe query "HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders" /v "Desktop" 2>&1 | sed -n 3p | awk '{ print $3 }' | sed -e 's|\s||g'`
tmp_path=`cmd.exe /k "echo %TMP% && exit" 2>&1`
appdata_path=`cmd.exe /k "echo %APPDATA% && exit" 2>&1`
programfile_path=`cmd.exe /k "echo %ProgramFiles% && exit" 2>&1`
windows_build=`reg.exe query "HKLM\Software\Microsoft\Windows NT\CurrentVersion" /v "CurrentBuild" 2>&1 | egrep -o '([0-9]{5})'`

## system info
hostname="$(hostname)"
release="$(lsb_release -d -s)"
kernel="$(uname -sr)"
uptime="$(uptime -p | sed 's/up //')"
packages="$((packages+=$(dpkg --get-selections | grep -cv deinstall$)))"
build="Windows 10 Build $windows_build"
shell="$(basename ${SHELL})"


# commands
## general
if [[ "$1" == "version" ]]; then
	if [[ "$2" == "-n" ]]; then
		echo $wslu_version
	else
		echo "wslu v$wslu_version"
	fi
elif [[ "$1" == "help" ]]; then
	echo "$help"
## package segment
elif [[ "$1" == "install" ]]; then
	if  [[ "$2" == "pulseaudio" ]]; then
		echo "${info}Adding repository..."
		sudo add-apt-repository -y ppa:aseering/wsl-pulseaudio
		tmp_version="$(lsb_release -c -s)"
		if [[ "$tmp_version" == "xenial" ]]; then
			echo "${info}Applying xenial version fix..."
			sudo sed -i 's/xenial/trusty/' /etc/apt/sources.list.d/aseering-ubuntu-wsl-pulseaudio-xenial.list
		fi
		echo "${info}Updating source..."
		sudo apt-get update
		echo "${info}Installing PulseAudio Linux client..."
		sudo apt-get install -y pulseaudio
		tpath="$(path_linux $tmp_path)"
		echo "${info}Downloading PulseAudio Windows client..."
		wget -cO $tpath/pulseaudio.zip http://bosmans.ch/pulseaudio/pulseaudio-1.1.zip
		echo "${info}Extracting files...."
		tpath="$(path_win $tmp_path)"
		cmd.exe /k "md \"$tpath\\pulseaudio\" && exit" 
		unzip -o $tpath/pulseaudio.zip -d $tpath/pulseaudio
		echo "${info}Installing PulseAudio Windows client..."
		apath="$(path_win $appdata_path)"
		xcopy.exe /e "$tpath\\pulseaudio" "$apath\\PulseAudio"
		echo "${info}Setting PulseAudio to run at startup..."
		apath_l="$(path_linux $appdata_path)"
		echo "set ws=wscript.createobject(\"wscript.shell\")\r\n" > "$apath_l/Microsoft/Windows/Start Menu/Programs/Startup/start_pulseaudio.vbe"
                echo "ws.run \"$apath\PulseAudio\bin\pulseaudio.exe --exit-idle-time=-1\",0\r\n" >> "$apath_l/Microsoft/Windows/Start Menu/Programs/Startup/start_pulseaudio.vbe"
		echo "${info}Adding recommended settings..."
		echo "load-module module-native-protocol-tcp auth-ip-acl=127.0.0.1 auth-anonymous=1\r\n" >> "$apath_l/PulseAudio/etc/pulse/default.pa"
		echo "${info}PulseAudio installed. Restart to take effect."
	elif [[ "$2" == "vcxsrv" ]]; then
		echo "${info}Downloading VcXsrv..."
		tpath="$(path_linux $tmp_path)"
		wget -cO $tpath/vcxsrv.exe http://downloads.sourceforge.net/project/vcxsrv/vcxsrv/1.19.2.0/vcxsrv-64.1.19.2.0.installer.exe
		echo "${info}Setting VcXsrv to run at startup..."
		apath="$(path_win $appdata_path)"
		ppath="$(path_win $programfile_path)"
		powershell.exe "\$s=(New-Object -COM WScript.Shell).CreateShortcut('$apath\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\VcXsrv.lnk');\$s.TargetPath='$ppath\\VcXsrv\\vcxsrv.exe';\$s.Arguments=':0 -ac -terminate -lesspointer -multiwindow -clipboard -wgl';\$s.Save();"
		echo "${info}Start installer."
		tpath="$(path_win $tmp_path)"
		cmd.exe /k "start \"$tpath\\VcXsrv.exe\" && exit"
		echo "${info}PulseAudio installed. Restart to take effect."
	else
		if [[ -n $3 ]]; then
			echo "${info}Adding repository..."
			sudo add-apt-repository -y $3
			echo "${info}Updating source..."
			sudo apt-get update
			echo "${info}Installing $2...."
			sudo apt-get install -y $2
			echo "${info}$2 installed."
			exit
		else
			echo "${error} No input or invalid input, aborting"
			exit 20
	fi
## shortcut segment
elif [[ "$1" == "shortcut" ]]; then
	if [[ -n $2 ]]; then
		cname="$2"
		tpath="$(path_win $tmp_path)"
		dpath="$(path_linux $desktop_path)"
		powershell.exe "\$s=(New-Object -COM WScript.Shell).CreateShortcut('$tpath\\$cname.lnk');\$s.TargetPath='C:\\Windows\\System32\\bash.exe';\$s.Arguments='-c \`\"DISPLAY=:0 $cname\`\"';\$s.Save();"
		tpath="$(path_linux $tmp_path)"
		mv $tpath/$cname.lnk $dpath
		echo "${info}Create shortcut ${cname}.lnk successful"
	else
		echo "${error}No input, aborting"
		exit 21
	fi
## system segment
elif [[ "$1" == "system" ]]; then
	
	if  [[ "$2" == "-B" ]] || [[ "$2" == "--build" ]]; then
		echo $build
	elif  [[ "$2" == "-R" ]] || [[ "$2" == "--release" ]]; then
		echo $release
	elif  [[ "$2" == "-K" ]] || [[ "$2" == "--kernel" ]]; then
		echo $kernel
	elif  [[ "$2" == "-P" ]] || [[ "$2" == "--package" ]]; then
		echo $packages
	else
		echo "$release on $build (kernel:$kernel)"
	fi
## fetch segment
elif [[ "$1" == "fetch" ]]; then
	cat <<EOF

${cyan} /\$\$      /\$\$  /\$\$\$\$\$\$  /\$\$       ${red}Windows 10 Linux Subsytem${reset}
${cyan}| \$\$  /\$ | \$\$ /\$\$__  \$\$| \$\$	  ${red}${USER}${reset}@${red}${hostname}${reset}
${cyan}| \$\$ /\$\$\$| \$\$| \$\$${reset}  ${cyan}\\__/| \$\$${reset}       ${red}BUILD:${reset}	${build}
${cyan}| \$\$${reset}${cyan}/\$\$${reset} ${cyan}\$\$${reset} ${cyan}\$\$${reset}${cyan}|  \$\$\$\$\$\$${reset} ${cyan}| \$\$${reset}       ${red}RELEASE:${reset}	${release}
${cyan}| \$\$\$\$${reset}${cyan}_  \$\$\$\$${reset} ${cyan}\\____  \$\$${reset}${cyan}| \$\$${reset}	  ${red}KERNEL:${reset}	${kernel}
${cyan}| \$\$\$${reset}${cyan}/ \\  \$\$\$${reset} ${cyan}/\$\$${reset}  ${cyan}\\ \$\$${reset}${cyan}| \$\$${reset}	  ${red}UPTIME:${reset}	${uptime}
${cyan}| \$\$${reset}${cyan}/   \\  \$\$${reset}${cyan}|  \$\$\$\$\$\$${reset}${cyan}/| \$\$\$\$\$\$\$\$${reset} ${red}SHELL:${reset}	${shell}
${cyan}|__/     \\__/ \\______/ |________/${reset} ${red}PACKAGES:${reset}	${packages}

EOF
else
	echo "$help_short"
	exit 20
fi

